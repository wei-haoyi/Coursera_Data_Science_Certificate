abline(z=mm.exp, col="red")
# distribution of the sample mean
hist(mean.exp, col="grey", breaks=40, xlim=c(2,9), main="Exponenitial Function Simulation Means", xlab="Exponentials Means")
# add mean of sample mean
abline(z=mm.exp, col="red")
hist(mean.exp, col="grey", breaks=40, xlim=c(2,9), main="Exponenitial Function Simulation Means", xlab="Exponentials Means")
# add mean of sample mean
abline(v=mm.exp, col="red")
# distribution of the sample mean
library(ggplot2)
ggplot(mean.exp, aes(x=mean.exp)) +
geom_histogram()
meanexp <- data.frame(mean.exp)
View(meanexp)
ggplot(meanexp, aes(x=mean.exp)) +
geom_histogram()
ggplot(meanexp, aes(x=mean.exp)) +
geom_histogram(binwidth=1)
ggplot(meanexp, aes(x=mean.exp)) +
geom_histogram(bins=40)
ggplot(meanexp, aes(x=mean.exp)) +
geom_histogram(bins=40, color="black", fill="white")
ggplot(meanexp, aes(x=mean.exp)) +
geom_histogram(bins=40, color="black", fill="grey")
ggplot(meanexp, aes(x=mean.exp)) +
geom_histogram(bins=40, color="black", fill="grey") +
labs(x="Sample Means", y="Frequency") +
ggtitle("Theoretical Mean vs. Actual Mean")
mm.exp
ggplot(meanexp, aes(x=mean.exp)) +
geom_histogram(bins=40, color="black", fill="grey") +
geom_vline(aes(mm.exp))
ggplot(meanexp, aes(x=mean.exp)) +
geom_histogram(bins=40, color="black", fill="grey") +
geom_vline(aes(mm.exp),color="red") +
labs(x="Sample Means", y="Frequency") +
ggtitle("Theoretical Mean vs. Actual Mean")
ggplot(meanexp, aes(x=mean.exp)) +
geom_histogram(bins=40, color="black", fill="grey") +
geom_vline(aes(xintercept=mm.exp),color="red") +
labs(x="Sample Means", y="Frequency") +
ggtitle("Theoretical Mean vs. Actual Mean")
ggplot(meanexp, aes(x=mean.exp)) +
geom_histogram(bins=40, color="black", fill="grey") +
geom_vline(aes(xintercept=mm.exp),color="red") +
geom_vline(aes(xintercept=1/lambda),color="yellow") +
labs(x="Sample Means", y="Frequency") +
ggtitle("Theoretical Mean vs. Actual Mean")
# Theoretical Variance
(1/lambda)^2 / n
# Sample Variance
sd(mean.exp)^2
df <- data.frame(rnorm(mean=mm.exp, sd=sd(mean.exp)))
df <- data.frame(rnorm(n=40,mean=mm.exp, sd=sd(mean.exp)))
View(meanexp)
ggplot(meanexp, aes(x=mean.exp)) +
geom_histogram(bins=40, color="black", fill="grey") +
geom_vline(aes(xintercept=mm.exp),color="red") +
geom_vline(aes(xintercept=1/lambda),color="yellow") +
labs(x="Sample Means", y="Frequency") +
ggtitle("Theoretical Mean vs. Actual Mean") +
geom_line(df$mean.exp)
ggplot(meanexp, aes(x=mean.exp)) +
geom_histogram(bins=40, color="black", fill="grey") +
geom_vline(aes(xintercept=mm.exp),color="red") +
geom_vline(aes(xintercept=1/lambda),color="yellow") +
labs(x="Sample Means", y="Frequency") +
ggtitle("Theoretical Mean vs. Actual Mean") +
stat_function(fun=dnorm, args=list(mean=mm.exp,sd=sd(mean.exp)))
ggplot(meanexp, aes(x=mean.exp)) +
geom_histogram(bins=40, color="black", fill="grey") +
geom_vline(aes(xintercept=mm.exp),color="red") +
geom_vline(aes(xintercept=1/lambda),color="yellow") +
labs(x="Sample Means", y="Frequency") +
ggtitle("Theoretical Mean vs. Actual Mean") +
geom_line(aes(y=df$mean.exp))
View(df)
ggplot(meanexp, aes(x=mean.exp)) +
geom_histogram(bins=40, color="black", fill="grey") +
geom_vline(aes(xintercept=mm.exp),color="red") +
geom_vline(aes(xintercept=1/lambda),color="yellow") +
labs(x="Sample Means", y="Frequency") +
ggtitle("Theoretical Mean vs. Actual Mean") +
geom_line(aes(y=df$rnorm.n...40..mean...mm.exp..sd...sd.mean.exp..))
ggplot(meanexp, aes(x=mean.exp)) +
geom_histogram(bins=40, color="black", fill="grey") +
geom_vline(aes(xintercept=mm.exp),color="red") +
geom_vline(aes(xintercept=1/lambda),color="yellow") +
labs(x="Sample Means", y="Frequency") +
ggtitle("Theoretical Mean vs. Actual Mean") +
geom_line(aes(y=rnorm(n=40,mean=mm.exp, sd=sd(mean.exp))))
ggplot(meanexp, aes(x=mean.exp)) +
geom_histogram(bins=40, color="black", fill="grey") +
geom_vline(aes(xintercept=mm.exp),color="red") +
geom_vline(aes(xintercept=1/lambda),color="yellow") +
labs(x="Sample Means", y="Frequency") +
ggtitle("Theoretical Mean vs. Actual Mean") +
stat_function(fun=dnorm, args=list(n=1000,mean=mm.exp,sd=sd(mean.exp)))
ggplot(meanexp, aes(x=mean.exp)) +
geom_histogram(bins=40, color="black", fill="grey") +
geom_vline(aes(xintercept=mm.exp),color="red") +
geom_vline(aes(xintercept=1/lambda),color="yellow") +
labs(x="Sample Means", y="Frequency") +
ggtitle("Theoretical Mean vs. Actual Mean") +
stat_function(fun=dnorm, args=list(mean=mm.exp,sd=sd(mean.exp)))
ggplot(meanexp, aes(x=mean.exp)) +
geom_histogram(bins=40, color="black", fill="grey") +
stat_function(fun=dnorm, args=list(mean=mm.exp,sd=sd(mean.exp)))
ggplot(meanexp, aes(x=mean.exp)) +
geom_histogram(bins=40, color="black", fill="grey") +
geom_vline(aes(xintercept=mm.exp),color="red") +
geom_vline(aes(xintercept=1/lambda),color="yellow") +
labs(x="Sample Means", y="Frequency") +
stat_function(fun=dnorm, args=list(mean=mm.exp,sd=sd(mean.exp)))
# mean of sample mean
mm.exp <- mean(mean.exp)
View(df)
ggplot(meanexp, aes(x=mean.exp)) +
geom_histogram(bins=40, color="black", fill="grey") +
geom_vline(aes(xintercept=mm.exp),color="red") +
geom_vline(aes(xintercept=1/lambda),color="yellow") +
labs(x="Sample Means", y="Frequency") +
stat_function(fun=rnorm, args=list(mean=mm.exp,sd=sd(mean.exp)))
ggplot(meanexp, aes(x=mean.exp)) +
geom_histogram(bins=40, color="black", fill="grey") +
geom_vline(aes(xintercept=mm.exp),color="red") +
geom_vline(aes(xintercept=1/lambda),color="yellow") +
labs(x="Sample Means", y="Frequency") +
stat_function(fun=dnorm, args=list(mean=mm.exp,sd=sd(mean.exp)))
df <- data.frame(dnorm(n=40,mean=mm.exp, sd=sd(mean.exp)))
df <- data.frame(dnorm(mean=mm.exp, sd=sd(mean.exp)))
df <- dnorm(mean=mm.exp, sd=sd(mean.exp))
ggplot(meanexp, aes(x=mean.exp)) +
geom_histogram(bins=40, color="black", fill="grey") +
geom_vline(aes(xintercept=mm.exp),color="red") +
geom_vline(aes(xintercept=1/lambda),color="yellow") +
labs(x="Sample Means", y="Frequency") +
stat_function(fun=dnorm, args=list(x,mean=mm.exp,sd=sd(mean.exp)))
ggplot(meanexp, aes(x=mean.exp)) +
geom_histogram(bins=40, color="black", fill="grey") +
geom_vline(aes(xintercept=mm.exp),color="red") +
geom_vline(aes(xintercept=1/lambda),color="yellow") +
labs(x="Sample Means", y="Frequency") +
stat_function(fun=dnorm, args=list(x=1000,mean=mm.exp,sd=sd(mean.exp)))
ggplot(meanexp, aes(x=mean.exp)) +
geom_histogram(bins=40, color="black", fill="grey") +
geom_vline(aes(xintercept=mm.exp),color="red") +
geom_vline(aes(xintercept=1/lambda),color="yellow") +
labs(x="Sample Means", y="Frequency") +
stat_function(fun=dnorm, args=list(mean=mm.exp,sd=sd(mean.exp)))
ggplot(meanexp, aes(x=mean.exp)) +
geom_histogram(bins=40, color="black", fill="grey") +
geom_vline(aes(xintercept=mm.exp),color="red") +
geom_vline(aes(xintercept=1/lambda),color="yellow") +
labs(x="Sample Means", y="Frequency") +
stat_function(fun=dnorm, color="green",args=list(mean=mm.exp,sd=sd(mean.exp)))
ggplot(meanexp, aes(x=mean.exp)) +
geom_histogram(bins=40, color="black", fill="grey") +
geom_vline(aes(xintercept=mm.exp),color="red") +
geom_vline(aes(xintercept=1/lambda),color="yellow") +
labs(x="Sample Means", y="Frequency") +
geom_density(color="red", size=1)
ggplot(meanexp, aes(x=mean.exp/1000)) +
geom_histogram(bins=40, color="black", fill="grey") +
geom_vline(aes(xintercept=mm.exp),color="red") +
geom_vline(aes(xintercept=1/lambda),color="yellow") +
labs(x="Sample Means", y="Frequency") +
geom_density(color="red", size=1)
ggplot(meanexp, aes(x=mean.exp/1000)) +
geom_histogram(bins=40, color="black", fill="grey") +
geom_vline(aes(xintercept=mm.exp),color="red") +
geom_vline(aes(xintercept=1/lambda),color="yellow") +
labs(x="Sample Means", y="Frequency") +
stat_function(fun=dnorm, color="green",args=list(mean=mm.exp,sd=sd(mean.exp)))
ggplot(meanexp, aes(x=mean.exp)) +
geom_histogram(aes(y=..density..), color="black", fill="grey") +
geom_vline(aes(xintercept=mm.exp),color="red") +
geom_vline(aes(xintercept=1/lambda),color="yellow") +
labs(x="Sample Means", y="Frequency") +
stat_function(fun=dnorm, color="green",args=list(mean=mm.exp,sd=sd(mean.exp)))
ggplot(meanexp, aes(x=mean.exp)) +
geom_histogram(aes(y=..density..), color="black", fill="grey") +
geom_vline(aes(xintercept=mm.exp),color="red") +
geom_vline(aes(xintercept=1/lambda),color="yellow") +
labs(x="Sample Means", y="Density") +
stat_function(fun=dnorm, color="green",args=list(mean=mm.exp,sd=sd(mean.exp)))
ggplot(meanexp, aes(x=mean.exp)) +
geom_histogram(aes(y=..density..), color="black", fill="grey") +
geom_density() +
geom_vline(aes(xintercept=mm.exp),color="red") +
geom_vline(aes(xintercept=1/lambda),color="yellow") +
labs(x="Sample Means", y="Density") +
stat_function(fun=dnorm, color="green",args=list(mean=mm.exp,sd=sd(mean.exp)))
knitr::opts_chunk$set(echo = TRUE)
data(ToothGrowth)
head(ToothGrowth)
dim(ToothGrowth)
str(ToothGrowth)
summary(ToothGrowth)
dose_half <- filter(ToothGrowth, dose==0.5)
dose_one <- filter(ToothGrowth, dose ==1)
dose_two <- filter(ToothGrowth, dose ==2)
View(ToothGrowth)
t.test(len ~ supp, dose_half)
t.test(len ~ supp, dose_one)
t.test(len ~ supp, dose_two)
dose <- c(0.5, 1.0, 2.0)
p_value <- c(0.0064, 0.0010, 0.9639)
conf.int <- c("1.72, 8.78", "2.80, 9.06", "-3.80, 3.64")
decision <- c("Reject null", "Reject null", "Do not reject null")
data.frame(dose, conf.int, p_value, decision)
# Hypothesis Testing
dose_half <- filter(ToothGrowth, dose ==0.5)
ToothGrowth$dose<-numeric(ToothGrowth$dose)
ToothGrowth$dose<-as.numeric(ToothGrowth$dose)
View(ToothGrowth)
ToothGrowth[,'dose']<-as.numeric(ToothGrowth[,'dose'])
str(ToothGrowth)
library(dplyr)
---
title: "Assignment1_part2"
---
title: "Assignment1_part2"
ToothGrowth <- data(ToothGrowth)
head(ToothGrowth)
dim(ToothGrowth)
str(ToothGrowth)
summary(ToothGrowth)
data(ToothGrowth)
head(ToothGrowth)
dim(ToothGrowth)
str(ToothGrowth)
summary(ToothGrowth)
head(ToothGrowth)
dim(ToothGrowth)
str(ToothGrowth)
summary(ToothGrowth)
# Hypothesis Testing
dose_half <- ToothGrowth %>%
filter(dose ==0.5)
View(ToothGrowth)
table(ToothGrowth$supp)
library(ggplot2)
ggplot(ToothGrowth, aes(x=dose, y= len, fill=supp)) +
geom_boxplot()
ToothGrowth$len <- as.factor(ToothGrowth$len)
ggplot(ToothGrowth, aes(x=dose, y= len, fill=supp)) +
geom_boxplot()
ToothGrowth$dose <- as.factor(ToothGrowth$dose)
ggplot(ToothGrowth, aes(x=dose, y= len, fill=supp)) +
geom_boxplot()
data(ToothGrowth)
head(ToothGrowth)
dim(ToothGrowth)
str(ToothGrowth)
summary(ToothGrowth)
library(ggplot2)
ToothGrowth$dose <- as.factor(ToothGrowth$dose)
ggplot(ToothGrowth, aes(x=dose, y= len, fill=supp)) +
geom_boxplot()
ggplot(ToothGrowth, aes(x=dose, y= len, fill=supp)) +
geom_boxplot() +
scale_fill_anual(values=c("yellow","orange"))
ggplot(ToothGrowth, aes(x=dose, y= len, fill=supp)) +
geom_boxplot() +
scale_fill_manual(values=c("yellow","orange"))
setwd("~/Documents/GitHub/Coursera_Data_Science_Certificate/7_Regression")
knitr::opts_chunk$set(echo = TRUE)
# load the mtcars data
data(mtcars)
# load the mtcars data
data(mtcars)
names(mtcars)
names(mtcars)
str(mtcars)
sum(mtcars)
summary(mtcars)
str(mtcars)
mtcars$am <- as.factor(mtcars$am)
ggplot(mtcars, aes(x=am, y=mpg)) +
geom_boxplot(color="blue")
ggplot(mtcars, aes(x=am, y=mpg)) +
geom_boxplot(color="blue") +
ggtitle("MPG by Transmission Type")
ggplot(mtcars, aes(x=am, y=mpg)) +
geom_boxplot(color="blue") +
ggtitle("MPG by Transmission Type") +
labs(x="Transmission Type", y="MPG")
mtcars$am <- as.factor(mtcars$am, levels(0=Manual, 1=Auto))
mtcars$am <- as.factor(mtcars$am, levels(0="Manual", 1="Auto"))
mtcars$am <- as.factor(mtcars$am, levels=c(0="Manual", 1="Auto")
mtcars$am <- as.factor(mtcars$am, levels=c(0="Manual", 1="Auto"))
mtcars$am <- factor(mtcars$am, levels=c(0="Manual", 1="Auto"))
mtcars$am <- factor(mtcars$am, levels=c(0=="Manual", 1=="Auto"))
mtcars$am <- as.factor(mtcars$am)
mtcars$am <- recode(mtcars$am, 0= "Manual", 1 = "Auto")
mtcars$am <- recode(mtcars$am, 0="Manual", 1="Auto")
mtcars$am <- recode_factor(mtcars$am, 0="Manual", 1="Auto")
# load the mtcars data
data(mtcars)
library(dplyr)
mtcars$am <- recode_factor(mtcars$am, 0="Manual", 1="Auto")
mtcars$am <- recode_factor(mtcars$am, Manual=0, Auto=1)
table(mtcars$am)
dim(mtcars)
mtcars$am <- recode_factor(mtcars$am, Manual==0, Auto==1)
mtcars$am <- recode_factor(mtcars$am, Manual=`0`, Auto=`1`)
View(mtcars)
mtcars$am <- recode_factor(mtcars$am, Manual=0, Auto=1)
class(mtcars$am)
data(mtcars)
class(mtcars$am)
library(dplyr)
mtcars$am <- recode_factor(mtcars$am, Manual=0, Auto=1)
table(mtcars$am)
levels(mtcars$am)
mtcars$am <- recode_factor(mtcars$am, Manual=0, Auto=1, .missing="wo")
# load the mtcars data
data(mtcars)
mtcars$am <- recode_factor(mtcars$am, Manual=0, Auto=1, .missing="wo")
mtcars$am <- recode_factor(mtcars$am, Manual=0, Auto=1, .missing=0)
# load the mtcars data
data(mtcars)
mtcars$am <- recode_factor(mtcars$am, Manual=0, Auto=1, .missing=0)
ggplot(mtcars, aes(x=am, y=mpg)) +
geom_boxplot(color="blue") +
ggtitle("MPG by Transmission Type") +
labs(x="Transmission Type", y="MPG")
levels(mtcar$am)
levels(mtcars$am)
# load the mtcars data
data(mtcars)
mtcars$am <- factor(mtcars$am )
levels(mtcars$am) <- list(Auto=1, Mannual=0)
ggplot(mtcars, aes(x=am, y=mpg)) +
geom_boxplot(color="blue") +
ggtitle("MPG by Transmission Type") +
labs(x="Transmission Type", y="MPG")
# load the mtcars data
data(mtcars)
mtcars$am <- factor(mtcars$am, levels=list(Auto=1, Mannual=0) )
ggplot(mtcars, aes(x=am, y=mpg)) +
geom_boxplot(color="blue") +
ggtitle("MPG by Transmission Type") +
labs(x="Transmission Type", y="MPG")
mtcars$am <- factor(mtcars$am )
levels(mtcars$am) <- list(Auto=1, Mannual=0)
ggplot(mtcars, aes(x=am, y=mpg)) +
geom_boxplot(color="blue") +
ggtitle("MPG by Transmission Type") +
labs(x="Transmission Type", y="MPG")
install.packages("explore")
library(explore)
library(dplyr)
mtcars |> explore_tbl()
# load the mtcars data
data(mtcars)
mtcars |> explore_tbl()
mtcars |> describe()
# explore the variables
mtcars |> explore_all()
# explore the variables
mtcars |> explore_all()
# explore the variables
mtcars |>
explore_all()
# explore the variables
mtcars |>
report()
# explore the variables
mtcars |>
report(output_dir = temdir())
# explore the variables
mtcars |>
report(output_dir = tempdir())
mtcars |>
report(output_dir = tempdir())
# explore the variables
mtcars |>
report(output_file="report.html", output_dir = tempdir())
# explore the variables
mtcars |>
explore_all()
# explore the variables
explore_all(mtcars)
# how many variables?
explore_tbl(mtcars)
# describe the dataset
describe(mtcars)
# explore the variables
explore_all(mtcars)
# explore the variables
explore_all(mtcars)
# explore the variables
explore_all(mtcars)
```{r, fig.width=14, fig.height=12}
# explore the variables
explore_all(mtcars)
# explore the variables
explore_all(mtcars)
# explore the variables
explore_all(mtcars)
mtcars |> select(mpg) |> explore_all(target = am)
mtcars |>
select(mpg) |>
explore_all(target = am)
mtcars |>
select(mpg) |>
explore_all(target = am)
?mtcars
levels(mtcars$am) <- list(Manual=1, Automatci=0)
mtcars$am <- factor(mtcars$am )
levels(mtcars$am) <- list(Manual=1, Automatci=0)
ggplot(mtcars, aes(x=am, y=mpg)) +
geom_boxplot(color="blue") +
ggtitle("MPG by Transmission Type") +
labs(x="Transmission Type", y="MPG")
model <- lm(mpg~., data=mtcars)
summary(model)
# Detect multicollinearity
library("corrplot")
install.packages("corrplot")
# Detect multicollinearity
library("corrplot")
corrplot(cor(mtcars), method = "number")
mtcars$am <- as.numeric(mtcars$am)
corrplot(cor(mtcars), method = "number")
corrplot(cor(mtcars), method = "number")
corrplot(cor(mtcars), method = "number")
model <- lm(mpg~., data=mtcars)
summary(model)
install.packages("olsrr")
install.packages("olsrr")
#TOLERANCE & VARIANCE INFLATION FACTOR (VIF)
library("olsrr")
ols_vif_tol(model)
model1 <- lm(mpg~hp+drat+qsec+vs+am+gear+carb, data=mtcars)
summary(model1)
ols_vif_tol(model1)
summary(model1)
install.packages("MASS")
library(MASS)
step <- stepAIC(model, direction="both", trace=FALSE)
summary(step)$coeff
# fit the new model
final_model <- lm(mpg ~ wt+qsec+am, data = mtcars)
summary(final_model)$coef
# fit the new model
final_model <- lm(mpg ~ wt+qsec+factor(am), data = mtcars)
summary(final_model)$coef
# fit the new model
final_model <- lm(mpg ~ wt+qsec+factor(am), data = mtcars)
summary(final_model)$coef
amalong <- as.dataframe(factor(mtcars$am))
amalong <- as.data.frame(factor(mtcars$am))
View(amalong)
ggplot(amalong, aes(x=factor(amalong$am), y=mpg)) +
geom_boxplot(color="blue") +
ggtitle("MPG by Transmission Type") +
labs(x="Transmission Type", y="MPG")
mtcars$am <- factor(mtcars$am)
levels(mtcars$am) <- list(Manual=1, Automatic=0)
ggplot(mtcars, aes(x=am, y=mpg)) +
geom_boxplot(color="blue") +
ggtitle("MPG by Transmission Type") +
labs(x="Transmission Type", y="MPG")
data(mtcars)
model <- lm(mpg~., data=mtcars)
summary(model)
# fit the new model
final_model <- lm(mpg ~ wt+qsec+factor(am), data = mtcars)
summary(final_model)$coef
final.res = resid(final_model)
#produce residual vs. fitted plot
plot(fitted(model), final.res)
#add a horizontal line at 0
abline(0,0)
#produce residual vs. fitted plot
plot(fitted(model), final.res)
#add a horizontal line at 0
abline(0,0)
#produce residual vs. fitted plot
plot(fitted(model), final.res)
#add a horizontal line at 0
abline(0,0)
# We now plot the residual against the observed values of the variable waiting.
ggplot(dataframe(fitted(model),final.res, aes(x=final.res,y=fitted(model))))
# We now plot the residual against the observed values of the variable waiting.
ggplot(data.frame(fitted(model),final.res, aes(x=final.res,y=fitted(model))))
# We now plot the residual against the observed values of the variable waiting.
#produce residual vs. fitted plot
plot(fitted(model), final.res)
#add a horizontal line at 0
abline(0,0)
#add a horizontal line at 0
abline(0,0)
# We now plot the residual against the observed values of the variable waiting.
#produce residual vs. fitted plot
plot(fitted(model), final.res)
#create Q-Q plot for residuals
qqnorm(res)
#create Q-Q plot for residuals
qqnorm(res.final)
#create Q-Q plot for residuals
qqnorm(final.res)
#add a straight diagonal line to the plot
qqline(res)
plot(final_model)
install.packages("shiny")
install.packages("shiny")
library(shiny)
shiny::runApp('~/Documents/GitHub/Coursera_Data_Science_Certificate/9_Data Products/MyAPP')
